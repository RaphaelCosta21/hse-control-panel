import * as React from "react";
import {
  Dialog,
  DialogType,
  DialogFooter,
  PrimaryButton,
  DefaultButton,
  Stack,
  Text,
  Dropdown,
  TextField,
  IDropdownOption,
  IPersonaProps,
} from "@fluentui/react";

export interface IReviewDialogsProps {
  // Start Review Dialog
  showReviewDialog: boolean;
  setShowReviewDialog: (show: boolean) => void;
  handleConfirmStartReview: () => Promise<void>;
  submittingReview: boolean;

  // Review Progress Dialog
  isReviewing: boolean;
  setIsReviewing: (reviewing: boolean) => void;
  reviewStatus: "Aprovado" | "Rejeitado" | "Pendente Informa√ß√µes";
  setReviewStatus: (
    status: "Aprovado" | "Rejeitado" | "Pendente Informa√ß√µes"
  ) => void;
  reviewComments: string;
  setReviewComments: (comments: string) => void;
  handleFinishReview: () => Promise<void>;

  // Start Confirmation Dialog
  showStartConfirmation: boolean;
  setShowStartConfirmation: (show: boolean) => void;
  selectedHSEResponsible: IPersonaProps | undefined;
  handleStartEvaluation: () => Promise<void>;

  // Send Confirmation Dialog
  showSendConfirmation: boolean;
  setShowSendConfirmation: (show: boolean) => void;
  evaluationResult: "Aprovado" | "Pendente Info." | "Rejeitado";
  handleSendEvaluation: () => Promise<void>;
}

const ReviewDialogs: React.FC<IReviewDialogsProps> = ({
  showReviewDialog,
  setShowReviewDialog,
  handleConfirmStartReview,
  submittingReview,
  isReviewing,
  setIsReviewing,
  reviewStatus,
  setReviewStatus,
  reviewComments,
  setReviewComments,
  handleFinishReview,
  showStartConfirmation,
  setShowStartConfirmation,
  selectedHSEResponsible,
  handleStartEvaluation,
  showSendConfirmation,
  setShowSendConfirmation,
  evaluationResult,
  handleSendEvaluation,
}) => {
  const reviewStatusOptions: IDropdownOption[] = [
    { key: "Aprovado", text: "‚úÖ Aprovado" },
    { key: "Rejeitado", text: "‚ùå Rejeitado" },
    { key: "Pendente Informa√ß√µes", text: "‚ö†Ô∏è Pendente Informa√ß√µes" },
  ];

  return (
    <>
      {/* Dialog para iniciar revis√£o */}
      <Dialog
        hidden={!showReviewDialog}
        onDismiss={() => setShowReviewDialog(false)}
        dialogContentProps={{
          type: DialogType.normal,
          title: "üîç Iniciar Revis√£o",
          subText:
            "Deseja iniciar a revis√£o deste formul√°rio? Voc√™ ser√° atribu√≠do como revisor.",
        }}
      >
        <DialogFooter>
          <PrimaryButton
            onClick={handleConfirmStartReview}
            disabled={submittingReview}
            text={submittingReview ? "Iniciando..." : "Sim, Iniciar Revis√£o"}
          />
          <DefaultButton
            onClick={() => setShowReviewDialog(false)}
            text="Cancelar"
          />
        </DialogFooter>
      </Dialog>

      {/* Dialog para finalizar revis√£o */}
      {isReviewing && (
        <Dialog
          hidden={false}
          onDismiss={() => {}}
          dialogContentProps={{
            type: DialogType.normal,
            title: "‚úÖ Finalizar Revis√£o",
            subText: "Defina o resultado da revis√£o deste formul√°rio.",
          }}
          modalProps={{ isBlocking: true }}
        >
          <Stack tokens={{ childrenGap: 16 }}>
            <Dropdown
              label="Status da Revis√£o"
              options={reviewStatusOptions}
              selectedKey={reviewStatus}
              onChange={(_, option) =>
                setReviewStatus(
                  option?.key as
                    | "Aprovado"
                    | "Rejeitado"
                    | "Pendente Informa√ß√µes"
                )
              }
            />
            <TextField
              label="Coment√°rios"
              multiline
              rows={4}
              value={reviewComments}
              onChange={(_, value) => setReviewComments(value || "")}
              placeholder="Digite seus coment√°rios sobre a revis√£o..."
            />
          </Stack>
          <DialogFooter>
            <PrimaryButton
              onClick={handleFinishReview}
              disabled={submittingReview}
              text={submittingReview ? "Finalizando..." : "Finalizar Revis√£o"}
            />
            <DefaultButton
              onClick={() => setIsReviewing(false)}
              text="Continuar Revisando"
            />
          </DialogFooter>
        </Dialog>
      )}

      {/* Di√°logo para confirmar in√≠cio da avalia√ß√£o */}
      <Dialog
        hidden={!showStartConfirmation}
        onDismiss={() => setShowStartConfirmation(false)}
        dialogContentProps={{
          type: DialogType.normal,
          title: "üöÄ Iniciar Avalia√ß√£o",
          subText: `Deseja iniciar a avalia√ß√£o deste formul√°rio com ${selectedHSEResponsible?.text}?`,
        }}
        modalProps={{ isBlocking: true, dragOptions: undefined }}
      >
        <Stack tokens={{ childrenGap: 12 }}>
          <Text>
            ‚ö†Ô∏è <strong>Aten√ß√£o:</strong> Ap√≥s iniciar a avalia√ß√£o:
          </Text>
          <ul style={{ margin: 0, paddingLeft: 20 }}>
            <li>O status ser√° alterado para &quot;Em An√°lise&quot;</li>
            <li>O respons√°vel HSE n√£o poder√° ser alterado</li>
            <li>Esta a√ß√£o n√£o pode ser desfeita</li>
          </ul>
        </Stack>
        <DialogFooter>
          <PrimaryButton
            onClick={async (e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log("‚úÖ Bot√£o confirmar avalia√ß√£o clicado");
              try {
                await handleStartEvaluation();
                console.log("‚úÖ Avalia√ß√£o iniciada com sucesso");
                setShowStartConfirmation(false);
              } catch (error) {
                console.error("‚ùå Erro ao iniciar avalia√ß√£o:", error);
              }
            }}
            text="Sim, Iniciar Avalia√ß√£o"
          />
          <DefaultButton
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log("‚ùå Cancelar avalia√ß√£o clicado");
              setShowStartConfirmation(false);
            }}
            text="Cancelar"
          />
        </DialogFooter>
      </Dialog>

      {/* Di√°logo para confirmar envio da avalia√ß√£o */}
      <Dialog
        hidden={!showSendConfirmation}
        onDismiss={() => setShowSendConfirmation(false)}
        dialogContentProps={{
          type: DialogType.normal,
          title: "üì§ Enviar Avalia√ß√£o",
          subText: `Confirma o envio da avalia√ß√£o com resultado "${evaluationResult}"? Esta a√ß√£o ir√° atualizar o status do formul√°rio.`,
        }}
      >
        <DialogFooter>
          <PrimaryButton
            onClick={handleSendEvaluation}
            text="Sim, Enviar Avalia√ß√£o"
          />
          <DefaultButton
            onClick={() => setShowSendConfirmation(false)}
            text="Cancelar"
          />
        </DialogFooter>
      </Dialog>
    </>
  );
};

export default ReviewDialogs;
